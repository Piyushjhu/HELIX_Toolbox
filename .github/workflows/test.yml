name: Test HELIX Toolbox

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pip python3-venv
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install qt5
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run basic tests
      run: |
        python test_basic.py
    
    - name: Test GUI imports (headless)
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      run: |
        python -c "import alpss_spade_gui; print('HELIX Toolbox GUI module imported successfully!')"
    
    - name: Test GUI creation (headless)
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      run: |
        python -c "
        import sys
        import os
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        
        from PyQt5.QtWidgets import QApplication
        from alpss_spade_gui import ALPSSSPADEGUI
        
        app = QApplication([])
        gui = ALPSSSPADEGUI()
        print('GUI created successfully!')
        app.quit()
        "
    
    - name: Test parameter collection (headless)
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
      run: |
        python -c "
        import sys
        import os
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        
        from PyQt5.QtWidgets import QApplication
        from alpss_spade_gui import ALPSSSPADEGUI
        
        app = QApplication([])
        gui = ALPSSSPADEGUI()
        
        # Test ALPSS parameters
        alpss_params = gui.get_alpss_params()
        print(f'ALPSS parameters: {len(alpss_params)} items')
        
        # Test SPADE parameters
        spade_params = gui.get_spade_params()
        print(f'SPADE parameters: {len(spade_params)} items')
        
        # Test specific parameters
        assert 'use_notch_filter' in alpss_params
        assert 'density' in spade_params
        print('Parameter collection tests passed!')
        
        app.quit()
        " 